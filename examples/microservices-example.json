{
  "name": "Microservices Load Test Example",
  "description": "Production-ready configuration for testing a microservices architecture",
  "applicationType": "microservices",
  "config": {
    "projectName": "banking-microservices-test",
    "targetUrl": "https://api-gateway.banking.example.com",
    "targetPort": 443,
    "authType": "bearer",
    "authToken": "your_service_mesh_token_here",
    "agentCount": 75,
    "testDuration": 30,
    "testGoal": "Simulate comprehensive banking operations across multiple microservices including account management, transactions, payments, and notifications with realistic cross-service dependencies",
    "endpoints": [
      "/api/gateway/health",
      "/api/auth-service/login",
      "/api/auth-service/refresh",
      "/api/user-service/profile",
      "/api/account-service/accounts",
      "/api/account-service/accounts/{id}/balance",
      "/api/transaction-service/transactions",
      "/api/transaction-service/transfer",
      "/api/payment-service/payments",
      "/api/payment-service/payments/{id}/status",
      "/api/notification-service/notifications",
      "/api/audit-service/logs"
    ],
    "customHeaders": {
      "Content-Type": "application/json",
      "Accept": "application/json",
      "User-Agent": "APE-LoadTest/1.0",
      "X-Service-Name": "ape-load-test",
      "X-Request-ID": "auto-generated",
      "X-Correlation-ID": "auto-generated"
    }
  },
  "microservicesArchitecture": {
    "services": [
      {
        "name": "auth-service",
        "description": "Authentication and authorization service",
        "endpoints": ["/api/auth-service/login", "/api/auth-service/refresh", "/api/auth-service/logout"],
        "dependencies": ["user-service"],
        "expectedLatency": "< 100ms",
        "criticalPath": true
      },
      {
        "name": "user-service",
        "description": "User profile and management service",
        "endpoints": ["/api/user-service/profile", "/api/user-service/preferences"],
        "dependencies": [],
        "expectedLatency": "< 150ms",
        "criticalPath": true
      },
      {
        "name": "account-service",
        "description": "Account and balance management service",
        "endpoints": ["/api/account-service/accounts", "/api/account-service/accounts/{id}/balance"],
        "dependencies": ["user-service", "audit-service"],
        "expectedLatency": "< 200ms",
        "criticalPath": true
      },
      {
        "name": "transaction-service",
        "description": "Transaction processing and history service",
        "endpoints": ["/api/transaction-service/transactions", "/api/transaction-service/transfer"],
        "dependencies": ["account-service", "payment-service", "notification-service", "audit-service"],
        "expectedLatency": "< 500ms",
        "criticalPath": true
      },
      {
        "name": "payment-service",
        "description": "External payment processing service",
        "endpoints": ["/api/payment-service/payments", "/api/payment-service/payments/{id}/status"],
        "dependencies": ["audit-service"],
        "expectedLatency": "< 1000ms",
        "criticalPath": false
      },
      {
        "name": "notification-service",
        "description": "User notification and messaging service",
        "endpoints": ["/api/notification-service/notifications"],
        "dependencies": [],
        "expectedLatency": "< 300ms",
        "criticalPath": false
      },
      {
        "name": "audit-service",
        "description": "Audit logging and compliance service",
        "endpoints": ["/api/audit-service/logs"],
        "dependencies": [],
        "expectedLatency": "< 100ms",
        "criticalPath": false
      }
    ],
    "serviceDiscovery": "Consul/Eureka",
    "loadBalancer": "NGINX/HAProxy",
    "circuitBreaker": "Hystrix/Resilience4j",
    "messageBroker": "RabbitMQ/Apache Kafka"
  },
  "expectedBehavior": {
    "authentication": "Service mesh authentication with JWT tokens and mTLS",
    "sessionManagement": "Distributed sessions with Redis/Hazelcast",
    "typicalUserFlow": [
      "Authenticate through auth-service",
      "Fetch user profile from user-service",
      "Load account information from account-service",
      "Check account balances and transaction history",
      "Initiate money transfer between accounts",
      "Process payment through payment-service",
      "Receive notifications about transaction status",
      "View audit logs for compliance"
    ],
    "performanceTargets": {
      "averageResponseTime": "< 300ms for critical path, < 1s for non-critical",
      "p95ResponseTime": "< 800ms for critical path, < 2s for non-critical",
      "errorRate": "< 0.1% for critical services, < 1% for non-critical",
      "throughput": "2000+ requests/minute across all services"
    }
  },
  "recommendations": {
    "agentScaling": "Start with 20-30 agents, scale up to 100+ for stress testing distributed systems",
    "testDuration": "Run for 20-60 minutes to test service resilience and auto-scaling",
    "monitoring": "Focus on service-to-service latency, circuit breaker activation, and cascade failures",
    "serviceIsolation": "Test individual service failures and recovery patterns",
    "dataConsistency": "Verify eventual consistency and distributed transaction handling"
  },
  "microservicesSpecificConfig": {
    "serviceDiscoveryEnabled": true,
    "circuitBreakerEnabled": true,
    "retryPolicyEnabled": true,
    "bulkheadIsolation": true,
    "distributedTracing": true,
    "serviceTimeouts": {
      "auth-service": 5000,
      "user-service": 10000,
      "account-service": 15000,
      "transaction-service": 30000,
      "payment-service": 60000,
      "notification-service": 20000,
      "audit-service": 5000
    },
    "circuitBreakerThresholds": {
      "failureRate": 50,
      "slowCallRate": 50,
      "slowCallDuration": 2000,
      "minimumNumberOfCalls": 10
    }
  }
}